// Code generated by protoc-gen-twirp_metrics v0.0.1, DO NOT EDIT.
// source: test.proto

package proto

import "context"
import "time"
import "github.com/go-kit/kit/metrics"
import hmetrics "github.com/heroku/x/go-kit/metrics"

// HelloWorldMetrics is a middleware for HelloWorld that collects timing and error rate data for servers.
type HelloWorldMetrics struct {
	Next HelloWorld
	SpeakErrorCount metrics.Counter
	SpeakDurationNS metrics.Histogram
}

func NewHelloWorldMetrics(next HelloWorld, prov hmetrics.Provider) HelloWorld {
	var result HelloWorldMetrics
	result.Next = next
	result.SpeakErrorCount = prov.NewCounter(`twirp.us.xeserv.api.hello_world.speak.error.count`)
	result.SpeakDurationNS = prov.NewHistogram(`twirp.us.xeserv.api.hello_world.speak.duration.ns`, 20)
	return result
}

func (i HelloWorldMetrics) Speak(ctx context.Context, input *Words) (result *Words, err error) {
	defer func(begin time.Time) {
		i.SpeakDurationNS.Observe(float64(time.Since(begin)))
		if err != nil {
			i.SpeakErrorCount.Add(1)
		}
	}(time.Now())

	result, err = i.Next.Speak(ctx, input)
	return
}

